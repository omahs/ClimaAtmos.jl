agents:
  queue: central
  slurm_mem: 8G
  modules: julia/1.8.5 cuda/11.8 ucx/1.14.1_cuda-11.8 openmpi/4.1.5_cuda-11.8 hdf5/1.12.2-ompi415 nsight-systems/2023.2.1

env:
  JULIA_LOAD_PATH: "${JULIA_LOAD_PATH}:${BUILDKITE_BUILD_CHECKOUT_PATH}/.buildkite"
  OPENBLAS_NUM_THREADS: 1
  JULIA_NVTX_CALLBACKS: gc
  OMPI_MCA_opal_warn_on_missing_libcuda: 0
  JULIA_MAX_NUM_PRECOMPILE_FILES: 100
  JULIA_DEPOT_PATH: "${BUILDKITE_BUILD_PATH}/${BUILDKITE_PIPELINE_SLUG}/depot/cpu"
  CONFIG_PATH: "config/model_configs/"
  PERF_CONFIG_PATH: "config/perf_configs/"
  MPI_CONFIG_PATH: "config/mpi_configs/"

steps:
  - label: "init :computer:"
    key: "init_cpu_env"
    command:
      - "echo $$JULIA_DEPOT_PATH"

      - echo "--- Configure MPI"
      - julia -e 'using Pkg; Pkg.add("MPIPreferences"); using MPIPreferences; use_system_binary()'

      - echo "--- Instantiate project"
      - "julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project -e 'using Pkg; Pkg.precompile()'"
      - "julia --project -e 'using Pkg; Pkg.status()'"

      - echo "--- Configure CUDA"
      # force the initialization of the CUDA runtime as it is lazily loaded by default
      - "julia --project -e 'using CUDA; CUDA.precompile_runtime()'"

      - echo "--- Instantiate test"
      - "julia --project=test -e 'using Pkg; Pkg.develop(path = \".\")'"
      - "julia --project=test -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=test -e 'using Pkg; Pkg.precompile()'"
      - "julia --project=test -e 'using Pkg; Pkg.status()'"

      - echo "--- Instantiate examples"
      - "julia --project=examples -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=examples -e 'using Pkg; Pkg.precompile()'"
      - "julia --project=examples -e 'using Pkg; Pkg.status()'"

      - echo "--- Instantiate perf"
      - "julia --project=perf -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=perf -e 'using Pkg; Pkg.precompile()'"
      - "julia --project=perf -e 'using Pkg; Pkg.status()'"

      - echo "--- Download artifacts"
      - "julia --project=examples artifacts/download_artifacts.jl"

    agents:
      slurm_cpus_per_task: 8
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8
      JULIA_MAX_NUM_PRECOMPILE_FILES: 50

  - wait

  - group: "Regression tests"
    steps:

      - label: ":computer: Ensure mse tables are reset when necessary"
        command: "julia --color=yes --project=examples regression_tests/test_reset.jl"

  - group: "EDMFX"
    steps:

      - label: ":genie: Diagnostic EDMFX Bomex in a box"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file ${CONFIG_PATH}diagnostic_edmfx_bomex_box.yml
        artifact_paths: "diagnostic_edmfx_bomex_box/*"
        agents:
          slurm_mem: 20GB
      
      - label: ":genie: Diagnostic EDMFX Bomex stretched grid in a box"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file ${CONFIG_PATH}diagnostic_edmfx_bomex_stretched_box.yml
        artifact_paths: "diagnostic_edmfx_bomex_stretched_box/*"
        agents:
          slurm_mem: 20GB

      - label: ":genie: Diagnostic EDMFX DYCOMS_RF01 in a box"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file ${CONFIG_PATH}diagnostic_edmfx_dycoms_rf01_box.yml
        artifact_paths: "diagnostic_edmfx_dycoms_rf01_box/*"
        agents:
          slurm_mem: 20GB
      
      - label: ":genie: Diagnostic EDMFX Bomex in a box stretched"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file ${CONFIG_PATH}diagnostic_edmfx_bomex_stretched_box.yml
        artifact_paths: "diagnostic_edmfx_bomex_stretched_box/*"
        agents:
          slurm_mem: 20GB

      - label: ":genie: Diagnostic EDMFX aquaplanet with TKE"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file ${CONFIG_PATH}diagnostic_edmfx_aquaplanet_tke.yml
        artifact_paths: "diagnostic_edmfx_aquaplanet_tke/*"
        agents:
          slurm_mem: 20GB

  - wait: ~
    continue_on_failure: true

  - label: ":robot_face: Move main results"
    command: "julia --color=yes --project=examples regression_tests/move_output.jl"
